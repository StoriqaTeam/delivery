pipeline:
  restore-cache:
    image: plugins/s3-cache:1
    pull: true
    secrets: [ aws_access_key_id, aws_secret_access_key ]
    mount: deps
    restore: true
    when:
      event:
      - pull_request
      - push
      - tag

###
# Test PR
###

  update_pr:
    image: plugins/git
    commands:
    - export BRANCH_SRC=origin/${DRONE_COMMIT_REFSPEC%%:*} BRANCH_DST=origin/${DRONE_BRANCH}
    - cp -rpf .git .git.bak
    - git config --global user.email "service@storiqa.com" && git config --global user.name "Storiqa Common"
    - git fetch && git checkout $BRANCH_SRC && git merge --no-commit $BRANCH_DST
    - rm -rf .git && mv -f .git.bak .git
    when:
      event: pull_request
  test:
    image: rust:1.29-stretch
    environment:
    - RUN_MODE=k8s
    - DATABASE_HOST=db-postgresql
    - DATABASE_URL=postgresql://delivery:delivery@db-postgresql/delivery
    - RUST_BACKTRACE=1
    - CARGO_HOME=deps
    - PGPASSWORD=a1a1a1a1
    commands:
    - rustup component add rustfmt-preview
    - cargo fmt -- --check
    - apt-get update && apt-get install -y ca-certificates wget gnupg2 clang
    - update-ca-certificates
    - wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | apt-key add -
    - echo "deb http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main" >> /etc/apt/sources.list.d/pgdg.list
    - apt-get update && apt-get install -y libpq5 postgresql-client-10
    - psql -U postgres -h db-postgresql -c "CREATE ROLE delivery WITH PASSWORD 'delivery' LOGIN REPLICATION" -c "CREATE DATABASE delivery OWNER delivery"
    - psql -U postgres -h db-postgresql -d delivery -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"";
    - mkdir -p /usr/local/cargo/bin || true
    - wget -q https://s3.eu-central-1.amazonaws.com/dumpster.stq/diesel -O /usr/local/cargo/bin/diesel
    - chmod +x /usr/local/cargo/bin/diesel
    - diesel migration run
    - update-ca-certificates
    - cargo test
    when:
      event: pull_request

###
# Build and deploy to nightly / stage
###

  build:
    image: rust:1.29-stretch
    environment:
    - CARGO_HOME=deps
    commands:
    - apt-get update && apt-get install -y clang
    - cargo build --release --locked
    when:
      event:
      - push
      - tag
  package:
    image: plugins/docker
    repo: storiqateam/stq-delivery
    dockerfile: docker/Dockerfile.run
    tags:
    - ${DRONE_BRANCH//\//_}
    - ${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    secrets:
    - docker_username
    - docker_password
    when:
      event: push
  package:
    image: plugins/docker
    repo: storiqateam/stq-delivery
    dockerfile: docker/Dockerfile.run
    tags:
    - '${DRONE_TAG}'
    - latest
    secrets:
    - docker_username
    - docker_password
    when:
      event: tag
  deploy2nightly:
    image: jackthestripper/drone_setimage
    namespace: default
    kind: deployment
    object: delivery
    img_names: storiqateam/stq-delivery
    img_tags: ${DRONE_BRANCH//\//_}${DRONE_BUILD_NUMBER}
    img_cnts: delivery
    secrets:
    - source: k8s_nightly_ca
      target: k8s_ca
    - source: k8s_nightly_user
      target: k8s_user
    - source: k8s_nightly_token
      target: k8s_token
    - source: k8s_nightly_addr
      target: k8s_addr
    when:
      branch: master
      event: push
  deploy2stage:
    image: jackthestripper/drone_setimage
    namespace: default
    kind: deployment
    object: delivery
    img_names: storiqateam/stq-delivery
    img_tags: '${DRONE_TAG}'
    img_cnts: delivery
    secrets:
    - source: k8s_stage_ca
      target: k8s_ca
    - source: k8s_stage_user
      target: k8s_user
    - source: k8s_stage_token
      target: k8s_token
    - source: k8s_stage_addr
      target: k8s_addr
    when:
      event: tag

###
# Deploy to stable / production
###

  deploy2stable:
    image: jackthestripper/drone_setimage
    namespace: default
    kind: deployment
    object: delivery
    img_names: storiqateam/stq-delivery
    img_tags: ${DRONE_BRANCH//\//_}${DRONE_PARENT_BUILD_NUMBER}
    img_cnts: delivery
    secrets:
    - source: k8s_stable_ca
      target: k8s_ca
    - source: k8s_stable_user
      target: k8s_user
    - source: k8s_stable_token
      target: k8s_token
    - source: k8s_stable_addr
      target: k8s_addr
    when:
      branch: master
      event: deployment
      environment: stable
  deploy2production:
    image: jackthestripper/drone_setimage
    namespace: default
    kind: deployment
    object: delivery
    img_names: storiqateam/stq-delivery
    img_tags: '${DRONE_TAG}'
    img_cnts: delivery
    secrets:
    - source: k8s_prod_ca
      target: k8s_ca
    - source: k8s_prod_user
      target: k8s_user
    - source: k8s_prod_token
      target: k8s_token
    - source: k8s_prod_addr
      target: k8s_addr
    when:
      event: deployment
      environment: production

###
# Notifications and post deploy ops
###

  rebuild-cache:
    image: plugins/s3-cache:1
    pull: true
    secrets: [ aws_access_key_id, aws_secret_access_key ]
    mount: deps
    rebuild: true
    when:
      event: push
      branch: master
  slack:
    image: plugins/slack
    webhook: https://hooks.slack.com/services/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
    channel: release
    icon_url: https://drone.io/favicon.ico
    username: cd.stq.cloud
    template: >
      {{#success build.status}}
        {{repo.name}} has been released to stage.stq.cloud!
      {{else}}
        Failed to deploy {{repo.name}} to stage.stq.cloud! More details here {{build.link}}
      {{/success}}
    when:
      event: tag
      status:
      - success
      - failure
  slack:
    image: plugins/slack
    webhook: https://hooks.slack.com/services/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
    channel: release
    icon_url: https://drone.io/favicon.ico
    username: cd.stq.cloud
    template: >
      {{#success build.status}}
        {{repo.name}} has been released to production.stq.cloud!
      {{else}}
        Failed to deploy {{repo.name}} to production.stq.cloud! More details here {{build.link}}
      {{/success}}
    when:
      event: deployment
      environment: production
      status:
      - success
      - failure

###
# Test services
###

services:
  db-postgresql:
    image: postgres:10-alpine
    environment:
    - POSTGRES_PASSWORD=a1a1a1a1
    when:
      event: pull_request

